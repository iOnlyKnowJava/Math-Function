#include <bits/stdc++.h>
#include <quadmath.h>
using namespace std;

//Return result of a choose b
__float128 choose(int a,int b,vector<__float128> &fac){
    if(a<=1500){
        return fac[a]/fac[b]/fac[a-b];
    }
    //Avoid NaN by manually calculating
    __float128 ans=1;
    if(a-b>b){
        b=a-b;
    }
    for(int i=a;i>b;i--){
        ans*=i;
    }
    for(int i=a-b;i>=2;i--){
        ans/=i;
    }
    return ans;
}


int main(){
    int n,start,bet;
    //Number of trials, starting value, and amount to bet per trial respectively
    cout<<"How many trials?\n";
    cin>>n;
    cout<<"What is the starting amount?\n";
    cin>>start;
    cout<<"How much is the bet for each trial?\n";
    cin>>bet;

    //Stores factorials from 0 to n
    vector<__float128> fac(min(n+1,1500),0);
    fac[0]=1;
    for(int i=1;i<fac.size();i++){
        fac[i]=fac[i-1]*i;
    }

    //Stores probabilities after each trial
    __float128 ans[n+1];
    ans[0]=start==0;

    //Stores number of losses required to lose it all
    int loseAll=(int)(start/bet);
    loseAll+=start%bet!=0;
    //Stores .5 to power of i
    __float128 halfPowers=1.0;
    //Stores number of results to ignore for given values
    __float128 ignore[n+1];
    for(int i=0;i<=n;i++){
        ignore[i]=0;
    }
    for(int i=1;i<=n;i++){
        halfPowers*=.5;
        //Skip if not possible to lose on this turn
        if(i<loseAll||(i-loseAll)%2==1){
            ans[i]=0;
            continue;
        }
        __float128 val=choose(i,(i-loseAll)/2,fac)-ignore[i];
        //Stores probability of losing all money after i trials as percentage
        ans[i]=100.0*val*halfPowers;
        if(isnan((long double)ans[i])||isinf((long double)ans[i])){
            break;
        }

        //Eliminate sequences starting with current val from future answers
        int m=2;
        int r=1;
        val*=2;
        for(int j=i+2;j<=n;j+=2){
            ignore[j]+=val;
            m+=2;
            r++;
            val=val*m*(m-1)/r/r;
        }
    }
    for(int i=0;i<=n;i++){
        if(isnan((long double)ans[i])||isinf((long double)ans[i])){
            cout<<"ERROR: Numbers too large, reaching NaN and INF";
            break;
        }
        cout<<i<<": "<<to_string((long double)ans[i])<<" %\n";
        
    }
}
